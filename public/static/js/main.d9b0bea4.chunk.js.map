{"version":3,"sources":["components/Title.tsx","components/PhaseSteps.tsx","components/StreamsForm.tsx","components/PhaseContent.tsx","containers/streams.tsx","containers/App.tsx","serviceWorker.ts","containers/reducer.tsx","index.tsx"],"names":["Title","react_default","a","createElement","Grid","Row","Column","Header","as","dividing","PhaseSteps","data","Fragment","Step","Group","vertical","undefined","steps","map","step","index","key","id","active","selected","onClick","setPhase","Content","name","Button","circular","color","icon","addPhase","StreamForm","state","error","errorMsg","checkValue","val","length","isNaN","_this","props","stream","max","min","concat","handleChange","e","result","target","value","handleInputChange","streamValue","setState","this","Segment","Form","Input","fluid","label","unit","placeholder","default","onChange","style","display","React","Component","StreamsForm","streams","sValue","streamValues","filter","v","StreamsForm_StreamForm","updatePhase","PhaseContent","downStreams","type","groups","forEach","strm","groupName","push","Card","Object","keys","g","Description","components_StreamsForm","App","selectedPhase","phases","container","padding","components_Title","width","components_PhaseSteps","components_PhaseContent","streamsValues","connect","dispatch","Boolean","window","location","hostname","match","streamsDefaultValues","initialState","reducer","arguments","action","oldPhases","slice","element","l","objectSpread","JSON","parse","stringify","parseInt","store","createStore","ReactDOM","render","es","containers_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kSAeeA,EAZS,WACtB,OACEC,EAAAC,EAAAC,cAACC,EAAA,EAAKC,IAAN,KACEJ,EAAAC,EAAAC,cAACC,EAAA,EAAKE,OAAN,KACEL,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAQC,GAAG,KAAKC,UAAQ,GAAxB,sCCmCOC,EAzB+B,SAAAC,GAC5C,OACEV,EAAAC,EAAAC,cAACF,EAAAC,EAAMU,SAAP,KACEX,EAAAC,EAAAC,cAACU,EAAA,EAAKC,MAAN,CAAYC,UAAQ,QACFC,IAAfL,EAAKM,OACJN,EAAKM,MAAMC,IAAI,SAACC,EAAYC,GAC1B,OACEnB,EAAAC,EAAAC,cAACU,EAAA,EAAD,CACEQ,IAAKF,EAAKG,GACVC,OAAQJ,EAAKK,SACbC,QAAS,kBAAMd,EAAKe,SAASP,EAAKG,MAElCrB,EAAAC,EAAAC,cAACU,EAAA,EAAKc,QAAN,KACE1B,EAAAC,EAAAC,cAACU,EAAA,EAAKb,MAAN,KAAamB,EAAKS,WAM9B3B,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAC0B,EAAA,EAAD,CAAQC,UAAQ,EAACC,MAAM,WAAWC,KAAK,OAAOP,QAASd,EAAKsB,wCCtB5DC,6MACJC,MAAQ,CACNC,OAAO,EACPC,SAAU,MAGZC,WAAa,SAACC,GACZ,OAAmB,IAAfA,EAAIC,OACC,CAAEJ,OAAO,EAAMC,SAAU,wBAE9BI,MAAMF,GACD,CAAEH,OAAO,EAAMC,SAAU,yBAE9BE,EAAMG,EAAKC,MAAMC,OAAOC,KAAON,EAAMG,EAAKC,MAAMC,OAAOE,IAClD,CACLV,OAAO,EACPC,SAAQ,2BAAAU,OAA6BL,EAAKC,MAAMC,OAAOE,IAA/C,OAAAC,OACNL,EAAKC,MAAMC,OAAOC,IADZ,MAKL,CAAET,OAAO,EAAOC,SAAU,OAGnCW,aAAe,SAACC,GACd,IAAMC,EAASR,EAAKJ,WAAWW,EAAEE,OAAOC,OACxCV,EAAKC,MAAMU,kBAAkBX,EAAKC,MAAMW,YAAYhC,GAAI2B,EAAEE,OAAOC,OACjEV,EAAKa,SAAS,CAAEnB,MAAOc,EAAOd,MAAOC,SAAUa,EAAOb,gGAGtD,IAAMa,EAASM,KAAKlB,WAAWkB,KAAKb,MAAMW,YAAYF,OAClDF,EAAOd,QAAUoB,KAAKrB,MAAMC,OAC9BoB,KAAKD,SAAS,CAAEnB,MAAOc,EAAOd,MAAOC,SAAUa,EAAOb,4CAIxD,OACEpC,EAAAC,EAAAC,cAACsD,EAAA,EAAD,KACExD,EAAAC,EAAAC,cAACuD,EAAA,EAAD,KACEzD,EAAAC,EAAAC,cAACuD,EAAA,EAAKC,MAAN,CACEC,OAAK,EACLC,MAAK,GAAAd,OAAKS,KAAKb,MAAMC,OAAOhB,KAAvB,MAAAmB,OAAgCS,KAAKb,MAAMC,OAAOkB,KAAlD,KACLC,YAAaP,KAAKb,MAAMC,OAAOoB,QAC/BZ,MAAOI,KAAKb,MAAMW,YAAYF,MAC9Ba,SAAUT,KAAKR,aACfZ,MAAOoB,KAAKrB,MAAMC,QAEpBnC,EAAAC,EAAAC,cAAA,QACE+D,MAAO,CACLnC,MAAO,OACPoC,QAASX,KAAKrB,MAAMC,MAAQ,eAAiB,SAG9CoB,KAAKrB,MAAME,mBArDC+B,IAAMC,WA+EhBC,EAlBgC,SAAA3D,GAC7C,OACEV,EAAAC,EAAAC,cAACF,EAAAC,EAAMU,SAAP,KACGD,EAAK4D,QAAQrD,IAAI,SAAA+B,GAChB,IAAMuB,EAAS7D,EAAK8D,aAAaC,OAAO,SAAAC,GAAC,OAAI1B,EAAE3B,KAAOqD,EAAErD,KAAI,GAC5D,OACErB,EAAAC,EAAAC,cAACyE,EAAD,CACEhC,OAAQK,EACR5B,IAAK4B,EAAE3B,GACPgC,YAAakB,EACbnB,kBAAmB1C,EAAKkE,kBC1BrBC,EAhCiC,SAAAnE,GAC9C,IAAMoE,EAAcpE,EAAK4D,QAAQG,OAAO,SAAAzB,GAAC,MAAe,eAAXA,EAAE+B,OAC3CC,EAAoB,GAQxB,OAPAF,EAAYG,QAAQ,SAAAC,QACanE,IAA3BiE,EAAOE,EAAKC,WACdH,EAAOE,EAAKC,WAAa,CAACD,GAE1BF,EAAOE,EAAKC,WAAWC,KAAKF,KAI9BlF,EAAAC,EAAAC,cAACmF,EAAA,EAAKxE,MAAN,KACGyE,OAAOC,KAAKP,GAAQ/D,IAAI,SAACuE,EAAGrE,GAC3B,OACEnB,EAAAC,EAAAC,cAACmF,EAAA,EAAD,CAAMjE,IAAKD,GACTnB,EAAAC,EAAAC,cAACmF,EAAA,EAAK3D,QAAN,KACE1B,EAAAC,EAAAC,cAACmF,EAAA,EAAK/E,OAAN,KAAckF,GACdxF,EAAAC,EAAAC,cAACmF,EAAA,EAAKI,YAAN,KACEzF,EAAAC,EAAAC,cAACwF,EAAD,CACEpB,QAASU,EAAOQ,GAChBhB,aAAc9D,EAAK8D,aACnBI,YAAalE,EAAKkE,qBCjDvBN,EAAU,CACnB,CACIjD,GAAI,IACJ0D,KAAM,aACNpD,KAAM,SACNwD,UAAW,QACXtB,KAAM,MACNjB,IAAK,IACLC,IAAK,EACLkB,QAAS,IAEb,CACI1C,GAAI,IACJ0D,KAAM,aACNpD,KAAM,SACNwD,UAAW,QACXtB,KAAM,MACNjB,IAAK,IACLC,IAAK,EACLkB,QAAS,IAEb,CACI1C,GAAI,IACJ0D,KAAM,aACNpD,KAAM,SACNwD,UAAW,QACXtB,KAAM,MACNjB,IAAK,IACLC,IAAK,EACLkB,QAAS,GAEb,CACI1C,GAAI,IACJ0D,KAAM,WACNpD,KAAM,gBACNwD,UAAW,UACXtB,KAAM,IACNjB,IAAK,GACLC,IAAK,EACLkB,QAAS,GAEb,CACI1C,GAAI,IACJ0D,KAAM,aACNpD,KAAM,QACNwD,UAAW,UACXtB,KAAM,IACNjB,IAAK,IACLC,IAAK,EACLkB,QAAS,IAEb,CACI1C,GAAI,IACJ0D,KAAM,WACNpD,KAAM,MACNwD,UAAW,YACXtB,KAAM,IACNjB,IAAK,GACLC,IAAK,EACLkB,QAAS,GAEb,CACI1C,GAAI,IACJ0D,KAAM,aACNpD,KAAM,gBACNwD,UAAW,YACXtB,KAAM,IACNjB,IAAK,GACLC,IAAK,EACLkB,QAAS,GAEb,CACI1C,GAAI,IACJ0D,KAAM,aACNpD,KAAM,qBACNwD,UAAW,YACXtB,KAAM,MACNjB,IAAK,GACLC,IAAK,EACLkB,QAAS,aC9DX4B,mLAEF,IAAMC,EAAgBrC,KAAKb,MAAMmD,OAAOpB,OAAO,SAAAzB,GAAC,OAAmB,IAAfA,EAAEzB,WAAmB,GACzE,OACEvB,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAM2F,WAAS,EAAC7B,MAAO,CAAE8B,QAAS,YAChC/F,EAAAC,EAAAC,cAAC8F,EAAD,MACAhG,EAAAC,EAAAC,cAACC,EAAA,EAAKC,IAAN,KACEJ,EAAAC,EAAAC,cAACC,EAAA,EAAKE,OAAN,CAAa4F,MAAO,GAClBjG,EAAAC,EAAAC,cAACgG,EAAD,CACElF,MAAOuC,KAAKb,MAAMmD,OAClB7D,SAAUuB,KAAKb,MAAMV,SACrBP,SAAU8B,KAAKb,MAAMjB,YAGzBzB,EAAAC,EAAAC,cAACC,EAAA,EAAKE,OAAN,CAAa4F,MAAO,IAClBjG,EAAAC,EAAAC,cAACiG,EAAD,CACE7B,QAASA,EACTE,aAAcoB,EAAcQ,cAC5BxB,YAAarB,KAAKb,MAAMkC,wBAlBpBT,IAAMC,WA6CTiC,cAnBS,SAACnE,GACvB,MAAO,CACL2D,OAAQ3D,EAAM2D,SAIS,SAACS,GAC1B,MAAO,CACLtE,SAAU,kBAAMsE,EAAS,CAAEvB,KAAM,eACjCtD,SAAU,SAACJ,GAAD,OAAgBiF,EAAS,CAAEvB,KAAM,YAAaxD,SAAUF,KAClEuD,YAAa,SAACvD,EAAY8B,GAAb,OACXmD,EAAS,CACPvB,KAAM,eACN1D,GAAIA,EACJ8B,MAAOA,OAKAkD,CAGbV,GCrDkBY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,+EChBAC,EAAuB,WAC3B,OAAOtC,EACJG,OAAO,SAAAzB,GAAC,MAAe,eAAXA,EAAE+B,OACd9D,IAAI,SAAA+B,GACH,MAAO,CACL3B,GAAI2B,EAAE3B,GACN8B,MAAOH,EAAEe,YAIX8C,EAAe,CACnBhB,OAAQ,CACN,CACExE,GAAI,EACJM,KAAM,UACNJ,UAAU,EACV6E,cAAeQ,OA0DNE,EArDC,WAA4C,IAA3C5E,EAA2C6E,UAAAxE,OAAA,QAAAxB,IAAAgG,UAAA,GAAAA,UAAA,GAA9BF,EAAcG,EAAgBD,UAAAxE,OAAA,EAAAwE,UAAA,QAAAhG,EAC1D,GAAoB,cAAhBiG,EAAOjC,KAAsB,CAC/B,IAAMkC,EAAY/E,EAAM2D,OAAOqB,QAC/BD,EAAUhC,QAAQ,SAACkC,GACjBA,EAAQ5F,UAAW,IAErB,IAAM6F,EAAIlF,EAAM2D,OAAOtD,OAAS,EAOhC,OANA0E,EAAU7B,KAAK,CACb/D,GAAI+F,EACJzF,KAAI,SAAAmB,OAAWsE,GACf7F,UAAU,EACV6E,cAAeQ,MAEVtB,OAAA+B,EAAA,EAAA/B,CAAA,GACFpD,EADL,CAEE2D,OAAQoB,IAIZ,GAAoB,cAAhBD,EAAOjC,KAAsB,CAC/B,IAAMkC,EAAY/E,EAAM2D,OAAOqB,QAK/B,OAJAD,EAAUhC,QAAQ,SAACkC,GACbA,EAAQ9F,KAAO2F,EAAOzF,SAAU4F,EAAQ5F,UAAW,EAClD4F,EAAQ5F,UAAW,IAEnB+D,OAAA+B,EAAA,EAAA/B,CAAA,GACFpD,EADL,CAEE2D,OAAQoB,IAGZ,GAAoB,iBAAhBD,EAAOjC,KAAyB,CAClC,IAAIkC,EAAYK,KAAKC,MAAMD,KAAKE,UAAUtF,EAAM2D,SAchD,OAbAoB,EAAUhC,QAAQ,SAACkC,IACQ,IAArBA,EAAQ5F,UACV4F,EAAQf,cAAcnB,QAAQ,SAACjC,GACzBA,EAAE3B,KAAO2F,EAAO3F,KACdoG,SAAST,EAAO7D,OAClBH,EAAEG,MAAQsE,SAAST,EAAO7D,OAE1BH,EAAEG,MAAQ6D,EAAO7D,WAMpBmC,OAAA+B,EAAA,EAAA/B,CAAA,GACFpD,EADL,CAEE2D,OAAQoB,IAGZ,OAAO/E,GC/DHwF,EAAQC,YAAYb,GAE1Bc,IAASC,OACP7H,EAAAC,EAAAC,cAAC4H,EAAA,EAAD,CAAUJ,MAAOA,GACf1H,EAAAC,EAAAC,cAAC6H,EAAD,OAGFC,SAASC,eAAe,SFwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.d9b0bea4.chunk.js","sourcesContent":["import React from \"react\";\nimport { Grid, Header } from \"semantic-ui-react\";\n\nconst Title: React.FC = () => {\n  return (\n    <Grid.Row>\n      <Grid.Column>\n        <Header as=\"h1\" dividing>\n          Phase Builder\n        </Header>\n      </Grid.Column>\n    </Grid.Row>\n  );\n};\n\nexport default Title;\n","import React from \"react\";\nimport { Step, Button } from \"semantic-ui-react\";\nimport { StreamValue } from \"./PhaseContent\";\n\nexport type Step = {\n  id: number;\n  name: string;\n  selected: boolean;\n  streamsValues: StreamValue[];\n};\n\nexport type PhaseStepsProps = {\n  steps: Step[];\n  addPhase: () => void;\n  setPhase: (idx: number) => void;\n};\n\nconst PhaseSteps: React.FC<PhaseStepsProps> = data => {\n  return (\n    <React.Fragment>\n      <Step.Group vertical>\n        {data.steps !== undefined &&\n          data.steps.map((step: Step, index: number) => {\n            return (\n              <Step\n                key={step.id}\n                active={step.selected}\n                onClick={() => data.setPhase(step.id)}\n              >\n                <Step.Content>\n                  <Step.Title>{step.name}</Step.Title>\n                </Step.Content>\n              </Step>\n            );\n          })}\n      </Step.Group>\n      <br />\n      <Button circular color=\"facebook\" icon=\"plus\" onClick={data.addPhase} />\n    </React.Fragment>\n  );\n};\n\nexport default PhaseSteps;\n","import React from \"react\";\nimport { Segment, Form } from \"semantic-ui-react\";\nimport { Stream, StreamValue, PhaseStepsProps } from \"./PhaseContent\";\n\ntype StreamFormProps = {\n  streamValue: StreamValue;\n  stream: Stream;\n  handleInputChange: (id: string, val: number) => void;\n};\n\ntype StreamFormState = {\n  error: boolean;\n  errorMsg: string;\n};\n\nclass StreamForm extends React.Component<StreamFormProps, StreamFormState> {\n  state = {\n    error: false,\n    errorMsg: \"\"\n  };\n\n  checkValue = (val: any) => {\n    if (val.length === 0) {\n      return { error: true, errorMsg: \"value can't be empty\" };\n    }\n    if (isNaN(val)) {\n      return { error: true, errorMsg: \"value can't be string\" };\n    }\n    if (val > this.props.stream.max || val < this.props.stream.min) {\n      return {\n        error: true,\n        errorMsg: `value out of bounderis [${this.props.stream.min} - ${\n          this.props.stream.max\n        }]`\n      };\n    }\n    return { error: false, errorMsg: \"\" };\n  };\n\n  handleChange = (e: any) => {\n    const result = this.checkValue(e.target.value);\n    this.props.handleInputChange(this.props.streamValue.id, e.target.value);\n    this.setState({ error: result.error, errorMsg: result.errorMsg });\n  };\n  componentDidUpdate() {\n    const result = this.checkValue(this.props.streamValue.value);\n    if (result.error !== this.state.error) {\n      this.setState({ error: result.error, errorMsg: result.errorMsg });\n    }\n  }\n  render() {\n    return (\n      <Segment>\n        <Form>\n          <Form.Input\n            fluid\n            label={`${this.props.stream.name} (${this.props.stream.unit})`}\n            placeholder={this.props.stream.default}\n            value={this.props.streamValue.value}\n            onChange={this.handleChange}\n            error={this.state.error}\n          />\n          <span\n            style={{\n              color: \"blue\",\n              display: this.state.error ? \"inline-block\" : \"none\"\n            }}\n          >\n            {this.state.errorMsg}\n          </span>\n        </Form>\n      </Segment>\n    );\n  }\n}\n\nconst StreamsForm: React.FC<PhaseStepsProps> = data => {\n  return (\n    <React.Fragment>\n      {data.streams.map(e => {\n        const sValue = data.streamValues.filter(v => e.id === v.id)[0];\n        return (\n          <StreamForm\n            stream={e}\n            key={e.id}\n            streamValue={sValue}\n            handleInputChange={data.updatePhase}\n          />\n        );\n      })}\n    </React.Fragment>\n  );\n};\n\nexport default StreamsForm;\n","import React from \"react\";\nimport { Card } from \"semantic-ui-react\";\nimport StreamsForm from \"./StreamsForm\";\nexport type Stream = {\n  id: string;\n  type: string;\n  name: string;\n  groupName: string;\n  unit: string;\n  max: number;\n  min: number;\n  default: number;\n};\n\nexport type StreamValue = {\n  id: string;\n  value: string;\n};\n\nexport type PhaseStepsProps = {\n  streams: Stream[];\n  streamValues: StreamValue[];\n  updatePhase: (id: string, value: number) => void;\n};\ntype GroupType = {\n  [key: string]: Stream[];\n};\n\nconst PhaseContent: React.FC<PhaseStepsProps> = data => {\n  const downStreams = data.streams.filter(e => e.type === \"downstream\");\n  let groups: GroupType = {};\n  downStreams.forEach(strm => {\n    if (groups[strm.groupName] === undefined) {\n      groups[strm.groupName] = [strm];\n    } else {\n      groups[strm.groupName].push(strm);\n    }\n  });\n  return (\n    <Card.Group>\n      {Object.keys(groups).map((g, index) => {\n        return (\n          <Card key={index}>\n            <Card.Content>\n              <Card.Header>{g}</Card.Header>\n              <Card.Description>\n                <StreamsForm\n                  streams={groups[g]}\n                  streamValues={data.streamValues}\n                  updatePhase={data.updatePhase}\n                />\n              </Card.Description>\n            </Card.Content>\n          </Card>\n        );\n      })}\n    </Card.Group>\n  );\n};\n\nexport default PhaseContent;\n","export const streams = [\n    {\n        id: \"1\",\n        type: \"downstream\",\n        name: \"Pump 1\",\n        groupName: \"Pumps\",\n        unit: \"RPM\",\n        max: 300,\n        min: 0,\n        default: 50\n    },\n    {\n        id: \"2\",\n        type: \"downstream\",\n        name: \"Pump 2\",\n        groupName: \"Pumps\",\n        unit: \"RPM\",\n        max: 300,\n        min: 0,\n        default: 50\n    },\n    {\n        id: \"3\",\n        type: \"downstream\",\n        name: \"Pump 3\",\n        groupName: \"Pumps\",\n        unit: \"RPM\",\n        max: 100,\n        min: 0,\n        default: 0\n    },\n    {\n        id: \"4\",\n        type: \"upstream\",\n        name: \"Temperature 1\",\n        groupName: \"Heating\",\n        unit: \"C\",\n        max: 40,\n        min: 0,\n        default: 0\n    },\n    {\n        id: \"5\",\n        type: \"downstream\",\n        name: \"Fan 1\",\n        groupName: \"Heating\",\n        unit: \"%\",\n        max: 100,\n        min: 0,\n        default: 70\n    },\n    {\n        id: \"6\",\n        type: \"upstream\",\n        name: \"pO2\",\n        groupName: \"Analytics\",\n        unit: \"C\",\n        max: 40,\n        min: 0,\n        default: 0\n    },\n    {\n        id: \"7\",\n        type: \"downstream\",\n        name: \"pH-Controller\",\n        groupName: \"Analytics\",\n        unit: \"-\",\n        max: 10,\n        min: 4,\n        default: 7\n    },\n    {\n        id: \"8\",\n        type: \"downstream\",\n        name: \"Glucose-Controller\",\n        groupName: \"Analytics\",\n        unit: \"Mol\",\n        max: 30,\n        min: 5,\n        default: 15\n    }\n];","import React from \"react\";\nimport Title from \"../components/Title\";\nimport PhaseSteps from \"../components/PhaseSteps\";\nimport PhaseContent from \"../components/PhaseContent\";\nimport { Step } from \"../components/PhaseSteps\";\nimport { streams } from \"./streams\";\n\nimport { Grid } from \"semantic-ui-react\";\nimport { connect } from \"react-redux\";\n\ntype AppProps = {\n  phases: Step[];\n  addPhase: () => void;\n  setPhase: (idx: number) => void;\n  updatePhase: (id: string, value: number) => void;\n};\n\nclass App extends React.Component<AppProps> {\n  render() {\n    const selectedPhase = this.props.phases.filter(e => e.selected === true)[0];\n    return (\n      <Grid container style={{ padding: \"5em 0em\" }}>\n        <Title />\n        <Grid.Row>\n          <Grid.Column width={3}>\n            <PhaseSteps\n              steps={this.props.phases}\n              addPhase={this.props.addPhase}\n              setPhase={this.props.setPhase}\n            />\n          </Grid.Column>\n          <Grid.Column width={13}>\n            <PhaseContent\n              streams={streams}\n              streamValues={selectedPhase.streamsValues}\n              updatePhase={this.props.updatePhase}\n            />\n          </Grid.Column>\n        </Grid.Row>\n      </Grid>\n    );\n  }\n}\nconst mapStateToProps = (state: any) => {\n  return {\n    phases: state.phases\n  };\n};\n\nconst mapDispatchToProps = (dispatch: any) => {\n  return {\n    addPhase: () => dispatch({ type: \"ADD_PHASE\" }),\n    setPhase: (id: number) => dispatch({ type: \"SET_PHASE\", selected: id }),\n    updatePhase: (id: string, value: number) =>\n      dispatch({\n        type: \"UPDATE_PHASE\",\n        id: id,\n        value: value\n      })\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { streams } from \"./streams\";\n\nconst streamsDefaultValues = () => {\n  return streams\n    .filter(e => e.type === \"downstream\")\n    .map(e => {\n      return {\n        id: e.id,\n        value: e.default\n      };\n    });\n};\nconst initialState = {\n  phases: [\n    {\n      id: 1,\n      name: \"Phase 1\",\n      selected: true,\n      streamsValues: streamsDefaultValues()\n    }\n  ]\n};\n\nconst reducer = (state: any = initialState, action: any) => {\n  if (action.type === \"ADD_PHASE\") {\n    const oldPhases = state.phases.slice();\n    oldPhases.forEach((element: any) => {\n      element.selected = false;\n    });\n    const l = state.phases.length + 1;\n    oldPhases.push({\n      id: l,\n      name: `Phase ${l}`,\n      selected: true,\n      streamsValues: streamsDefaultValues()\n    });\n    return {\n      ...state,\n      phases: oldPhases\n    };\n  }\n\n  if (action.type === \"SET_PHASE\") {\n    const oldPhases = state.phases.slice();\n    oldPhases.forEach((element: any) => {\n      if (element.id === action.selected) element.selected = true;\n      else element.selected = false;\n    });\n    return {\n      ...state,\n      phases: oldPhases\n    };\n  }\n  if (action.type === \"UPDATE_PHASE\") {\n    let oldPhases = JSON.parse(JSON.stringify(state.phases));\n    oldPhases.forEach((element: any) => {\n      if (element.selected === true) {\n        element.streamsValues.forEach((e: any) => {\n          if (e.id === action.id) {\n            if (parseInt(action.value)) {\n              e.value = parseInt(action.value);\n            } else {\n              e.value = action.value;\n            }\n          }\n        });\n      }\n    });\n    return {\n      ...state,\n      phases: oldPhases\n    };\n  }\n  return state;\n};\n\nexport default reducer;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport \"./semantic/semantic.min.css\";\nimport App from \"./containers/App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { Provider } from \"react-redux\";\nimport { createStore } from \"redux\";\nimport reducer from \"./containers/reducer\";\n\nconst store = createStore(reducer);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}